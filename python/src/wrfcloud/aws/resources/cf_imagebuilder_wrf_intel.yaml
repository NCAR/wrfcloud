---
# Description:
# This template creates an EC2 Image Builder Pipeline for WRF v4.4.0 and dependencies with Intel

Description: EC2 Image Builder Pipeline for WRF v4.4.0 and dependencies with Intel
AWSTemplateFormatVersion: '2010-09-09'

Resources:

  WrfComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: wrf-4-4-0
      Platform: Linux
      Version: 4.4.0
      Data: |
        name: WRF v4.4.0 and Dependencies
        description: 'Build and install all WRF dependencies'
        schemaVersion: 1.0

        phases:
          - name: build
            steps:
              - name: update_os
                action: ExecuteBash
                inputs:
                  commands:
                    - echo 'H4sIALNR52EAA4vOz0t1DPCM5cpLzE219cwrSc05tE4BIqhQlFqQX5xZkl9UyZWUWJxaWpRjm1FSUlBspa9fWZqrB5bWywTp0UvOz9UH6kosyORKzUtMyklNsTXkSi9IT85ITc4GMkFq45H4QGZ2aiVe48AsXaBCXaDKYn33AHfdgFAnXW/XSF1PvxBXH93gcN2AIH+XUOeQYD2gDBcAamMwicwAAAA=' | base64 -d | gunzip > /etc/yum.repos.d/oneAPI.repo
                    - rpm --import https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
                    - yum -y update
                    - yum -y install intel-oneapi-common-licensing
                    - yum -y install intel-oneapi-libdpstd-devel intel-oneapi-itac
                    - yum -y install intel-hpckit
                    - yum -y install gcc gcc-c++ gcc-gfortran m4 curl-devel git cmake pkgconfig expat-devel libX11-devel libXmu-devel Xaw3d-devel libXaw-devel make openssl-devel bzip2-devel libffi-devel sqlite-devel

              - name: configure_bash
                action: ExecuteBash
                inputs:
                  commands:
                    - echo 'export MPI="/opt/intel/oneapi/mpi/latest"' | tee -a /etc/bashrc
                    - echo 'export OPENMPI="${MPI}"' | tee -a /etc/bashrc
                    - echo 'export INTEL="/opt/intel/oneapi/compiler/latest/linux"' | tee -a /etc/bashrc
                    - echo 'export PATH="${INTEL}/bin/intel64:${MPI}/bin:${PATH}"' | tee -a /etc/bashrc
                    - echo 'export I_MPI_CC="icc"' | tee -a /etc/bashrc
                    - echo 'export I_MPI_CXX="icpc"' | tee -a /etc/bashrc
                    - echo 'export I_MPI_FC="ifort"' | tee -a /etc/bashrc
                    - echo 'export I_MPI_F90="ifort"' | tee -a /etc/bashrc
                    - echo 'export FC="mpifc"' | tee -a /etc/bashrc
                    - echo 'export F90="mpifc"' | tee -a /etc/bashrc
                    - echo 'export F77="mpifc"' | tee -a /etc/bashrc
                    - echo 'export CC="mpicc"' | tee -a /etc/bashrc
                    - echo 'export CXX="mpicxx"' | tee -a /etc/bashrc
                    - echo 'export CPP="${CC} -E"' | tee -a /etc/bashrc
                    - echo 'export CC_FOR_BUILD="${CC}"' | tee -a /etc/bashrc
                    - echo 'export CPP_FOR_BUILD="${CPP}"' | tee -a /etc/bashrc
                    - echo 'export CXXCPP="${CXX} -E"' | tee -a /etc/bashrc
                    - echo 'export ABI="64"' | tee -a /etc/bashrc
                    - echo 'export FCFLAGS="-I${MPI}/include"' | tee -a /etc/bashrc
                    - echo 'export CFLAGS="-I${MPI}/include"' | tee -a /etc/bashrc
                    - echo 'export LDFLAGS="-L${MPI}/lib -L${MPI}/lib/release"' | tee -a /etc/bashrc
                    - echo 'export LD_LIBRARY_PATH="${MPI}/lib/release:${MPI}/lib"' | tee -a /etc/bashrc
                    - echo 'export I_MPI_OFI_LIBRARY_INTERNAL=0' | tee -a /etc/bashrc
                    - echo 'source /opt/intel/oneapi/setvars.sh --force' | tee -a /etc/bashrc
                    - echo 'export I_MPI_FABRICS=shm:ofi' | tee -a /etc/bashrc
                    - echo 'export I_MPI_OFI_PROVIDER=efa' | tee -a /etc/bashrc
                    - echo '*    hard    stack    unlimited' | tee -a /etc/security/limits.conf
                    - echo '*    soft    stack    unlimited' | tee -a /etc/security/limits.conf

              - name: download_source
                action: ExecuteBash
                inputs:
                  commands:
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - wget https://www.wrfcloud.com/libs/cmake-3.25.0-rc3.tar.gz
                    - wget https://www.wrfcloud.com/libs/eccodes-2.27.0.tar.gz
                    - wget https://www.wrfcloud.com/libs/g2clib-1.6.0-patch.tar.gz
                    - wget https://www.wrfcloud.com/libs/hdf5-1.10.5.tar.gz
                    - wget https://www.wrfcloud.com/libs/jasper-1.900.1.tar.gz
                    - wget https://www.wrfcloud.com/libs/libaec-v1.0.6.tar.gz
                    - wget https://www.wrfcloud.com/libs/libpng-1.2.50.tar.gz
                    - wget https://www.wrfcloud.com/libs/ncview-2.1.7.tar.gz
                    - wget https://www.wrfcloud.com/libs/netcdf-4.7.3.tar.gz
                    - wget https://www.wrfcloud.com/libs/netcdf-cxx-4.3.1.tar.gz
                    - wget https://www.wrfcloud.com/libs/netcdf-fortran-4.5.2.tar.gz
                    - wget https://www.wrfcloud.com/libs/szip-2.1.1.tar.gz

              - name: build-zlib
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - tar -xzf zlib-1.2.11.tar.gz
                    - cd zlib-1.2.11
                    - ./configure --prefix=/opt/zlib 2>&1 | tee configure.log
                    - make -j 4 install 2>&1 | tee build.log
                    - echo 'export ZLIB=/opt/zlib' | tee -a /etc/bashrc
                    - echo 'export LD_LIBRARY_PATH=${ZLIB}/lib:${LD_LIBRARY_PATH}' | tee -a /etc/bashrc

              - name: build-szip
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - tar -xzf szip-2.1.1.tar.gz
                    - cd szip-2.1.1
                    - ./configure --prefix=/opt/szip 2>&1 | tee configure.log
                    - make -j 4 install 2>&1 | tee build.log
                    - echo 'export SZIP=/opt/szip' | tee -a /etc/bashrc
                    - echo 'export LD_LIBRARY_PATH=${SZIP}/lib:${LD_LIBRARY_PATH}' | tee -a /etc/bashrc

              - name: build-hdf5
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - tar -xzf hdf5-1.10.5.tar.gz
                    - cd hdf5-hdf5-1_10_5
                    - ./configure --prefix=/opt/hdf5 --enable-parallel --enable-fortran --with-zlib=${ZLIB} --with-szlib=${SZIP} 2>&1 | tee configure.log
                    - make -j 4 install 2>&1 | tee build.log
                    - echo 'export HDF5=/opt/hdf5' | tee -a /etc/bashrc
                    - echo 'export PATH=${HDF5}/bin:${PATH}' | tee -a /etc/bashrc
                    - echo 'export LD_LIBRARY_PATH=${HDF5}/lib:${LD_LIBRARY_PATH}' | tee -a /etc/bashrc

              - name: build-netcdf
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - tar -xzf netcdf-4.7.3.tar.gz
                    - cd netcdf-c-4.7.3
                    - export CPPFLAGS="-I${HDF5}/include -I${SZIP}/include -I${ZLIB}/include"
                    - export LDFLAGS="-L${HDF5}/lib -L${SZIP}/lib -L${ZLIB}/lib"
                    - ./configure --prefix=/opt/netcdf --disable-dap-remote-tests --enable-mmap --enable-diskless --enable-netcdf4 2>&1 | tee configure.log
                    - make -j 4 install 2>&1 | tee build.log
                    - echo 'export NETCDF=/opt/netcdf' | tee -a /etc/bashrc
                    - echo 'export PATH=${NETCDF}/bin:${PATH}' | tee -a /etc/bashrc
                    - echo 'export LD_LIBRARY_PATH=${NETCDF}/lib:${LD_LIBRARY_PATH}' | tee -a /etc/bashrc

              - name: build-netcdf-fortran
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - tar -xzf netcdf-fortran-4.5.2.tar.gz
                    - cd netcdf-fortran-4.5.2
                    - export CPPFLAGS="-I${HDF5}/include -I${SZIP}/include -I${NETCDF}/include"
                    - export LDFLAGS="-L${HDF5}/lib -L${SZIP}/lib -L${NETCDF}/lib"
                    - ./configure --prefix=/opt/netcdf 2>&1 | tee configure.log
                    - make install 2>&1 | tee build.log

              - name: build-netcdf-cxx
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - tar -xzf netcdf-cxx-4.3.1.tar.gz
                    - cd netcdf-cxx4-4.3.1
                    - export CPPFLAGS="-I${HDF5}/include -I${SZIP}/include -I${NETCDF}/include"
                    - export LDFLAGS="-L${HDF5}/lib -L${SZIP}/lib -L${NETCDF}/lib"
                    - ./configure --prefix=/opt/netcdf 2>&1 | tee configure.log
                    - make install 2>&1 | tee build.log

              - name: build-libpng
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - tar -xzf libpng-1.2.50.tar.gz
                    - cd libpng-1.2.50
                    - ./configure --prefix=/opt/libpng 2>&1 | tee configure.log
                    - make -j 4 install 2>&1 | tee build.log
                    - echo 'export LIBPNG=/opt/libpng' | tee -a /etc/bashrc
                    - echo 'export PATH=${LIBPNG}/bin:${PATH}' | tee -a /etc/bashrc
                    - echo 'export LD_LIBRARY_PATH=${LIBPNG}/lib:${LD_LIBRARY_PATH}' | tee -a /etc/bashrc

              - name: build-jasper
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - tar -xzf jasper-1.900.1.tar.gz
                    - cd jasper-1.900.1
                    - ./configure --prefix=/opt/jasper 2>&1 | tee configure.log
                    - make -j 4 install 2>&1 | tee build.log
                    - echo 'export JASPER=/opt/jasper' | tee -a /etc/bashrc
                    - echo 'export PATH=${JASPER}/bin:${PATH}' | tee -a /etc/bashrc
                    - echo 'export LD_LIBRARY_PATH=${JASPER}/lib:${LD_LIBRARY_PATH}' | tee -a /etc/bashrc

              - name: build-g2clib
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - tar -xzf g2clib-1.6.0-patch.tar.gz
                    - cd g2clib-1.6.0-patch
                    - cat makefile | sed "s/INC=.*/INC=-I\/opt\/jasper\/include -I\/opt\/libpng\/include/g" > makefile2
                    - make -f makefile2 2>&1 | tee build.log
                    - mkdir -p /opt/g2clib/lib
                    - cp -f libgrib2c.a /opt/g2clib/lib
                    - echo 'export G2C=/opt/g2clib' | tee -a /etc/bashrc
                    - echo 'export LD_LIBRARY_PATH=${G2C}/lib:${LD_LIBRARY_PATH}' | tee -a /etc/bashrc

              - name: build-udunits
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - tar -xzf udunits-2.2.28.tar.gz
                    - cd udunits-2.2.28
                    - ./configure --prefix=/opt/udunits 2>&1 | tee configure.log
                    - make -j 4 install 2>&1 | tee build.log
                    - echo 'export UDUNITS=/opt/udunits' | tee -a /etc/bashrc
                    - echo 'export PATH=${UDUNITS}/bin:${PATH}' | tee -a /etc/bashrc
                    - echo 'export LD_LIBRARY_PATH=${UDUNITS}/lib:${LD_LIBRARY_PATH}' | tee -a /etc/bashrc

              - name: build-ncview
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - tar -xzf ncview-2.1.7.tar.gz
                    - cd ncview-2.1.7
                    - ./configure --prefix=/opt/netcdf --with-udunits2_incdir=${UDUNITS}/include  --with-udunits2_libdir=${UDUNITS}/lib --with-png_incdir=${LIBPNG}/include --with-png_libdir=${LIBPNG}/lib 2>&1 | tee configure.log
                    - make -j 4 install 2>&1 | tee build.log
                    - echo 'X11Forwarding yes' | tee -a /etc/ssh/sshd_config

              - name: python39
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - wget https://www.python.org/ftp/python/3.9.13/Python-3.9.13.tgz
                    - tar -xzf Python-3.9.13.tgz
                    - cd Python-3.9.13
                    - unset CPP CC_FOR_BUILD CPP_FOR_BUILD
                    - export CC=gcc
                    - ./configure --prefix=/opt/python --enable-optimizations --with-openssl=/usr --enable-loadable-sqlite-extensions
                    - make -j 4 install
                    - echo 'export PYTHON39=/opt/python' | tee -a /etc/bashrc
                    - echo 'export PATH=${PYTHON39}/bin:${PATH}' | tee -a /etc/bashrc

              - name: build-cmake
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - cd /opt/src
                    - tar -xzf cmake-3.25.0-rc3.tar.gz
                    - cd cmake-3.25.0-rc3
                    - ./configure --prefix=/opt/cmake 2>&1 | tee configure.log
                    - gmake install 2>&1 | tee build.log
                    - echo 'export CMAKE=/opt/cmake' | tee -a /etc/bashrc
                    - echo 'export PATH=${CMAKE}/bin:${PATH}' | tee -a /etc/bashrc

              - name: build-libaec
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - cd /opt/src
                    - tar -xzf libaec-v1.0.6.tar.gz
                    - cd libaec-v1.0.6
                    - mkdir build
                    - cd build
                    - cmake -DCMAKE_INSTALL_PREFIX=/opt/libaec .. 2>&1 | tee cmake.log        
                    - make -j 8 install 2>&1 | tee build.log
                    - echo 'export LIBAEC=/opt/libaec' | tee -a /etc/bashrc
                    - echo 'export PATH=${LIBAEC}/bin:${PATH}' | tee -a /etc/bashrc
                    - echo 'export LD_LIBRARY_PATH=${LIBAEC}/lib:${LD_LIBRARY_PATH}' | tee -a /etc/bashrc

              - name: build-eccodes
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - cd /opt/src
                    - tar -xzf eccodes-2.27.0.tar.gz
                    - cd eccodes-2.27.0-Source
                    - mkdir build
                    - cd build
                    - cmake -DCMAKE_INSTALL_PREFIX=/opt/eccodes -DAEC_LIBRARY=${LIBAEC}/lib64/libaec.so -DAEC_INCLUDE_DIR=${LIBAEC}/include .. 2>&1 | tee cmake.log        
                    - make -j 8 install 2>&1 | tee build.log
                    - echo 'export ECCODES_DIR=/opt/eccodes' | tee -a /etc/bashrc

              - name: wrfcloud
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - mkdir -p /opt/src
                    - cd /opt/src
                    - git clone -b feature/ui-read-real-wrf-data https://github.com/NCAR/wrfcloud
                    - pip3 install wrfcloud/python/src

              - name: build-wrf
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - cd /home/ec2-user
                    - git clone https://github.com/wrf-model/WRF
                    - cd WRF
                    - git checkout v4.4
                    - ./clean
                    - ./configure << EOF
                    - 15
                    - 1
                    - EOF
                    - ./compile em_real 2>&1 | tee build.log
                    - cd /home/ec2-user
                    - chown -R ec2-user.ec2-user WRF

              - name: build-wps
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - cd /home/ec2-user
                    - git clone https://github.com/wrf-model/WPS
                    - cd WPS
                    - git checkout v4.4
                    - export JASPERLIB="-L${SZIP}/lib -L${LIBPNG}/lib -L${ZLIB}/lib -L${JASPER}/lib -L${G2C}/lib -ljasper -lpng -lz -lgrib2c"
                    - export JASPERINC="-I${SZIP}/include -I${LIBPNG}/include -I${ZLIB}/lib -I${JASPER}/include"
                    - export FCFLAGS="${FCFLAGS} ${JASPERINC}"
                    - ./clean
                    - ./configure << EOF
                    - 19
                    - EOF
                    - ./compile 2>&1 | tee build.log
                    - cd /home/ec2-user
                    - chown -R ec2-user.ec2-user WPS

              - name: build-upp
                action: ExecuteBash
                inputs:
                  commands:
                    - source /etc/bashrc
                    - cd /home/ec2-user
                    - wget https://dtcenter.org/sites/default/files/code/DTC_upp_v4.0.1.tar.gz
                    - tar zxvf DTC_upp_v4.0.1.tar.gz
                    - mv UPPV4.0.1 UPP
                    - cd UPP
                    - export JASPERLIB="-L${SZIP}/lib -L${LIBPNG}/lib -L${ZLIB}/lib -L${JASPER}/lib -L${G2C}/lib -ljasper -lpng -lz -lgrib2c"
                    - export JASPERINC="-I${SZIP}/include -I${LIBPNG}/include -I${ZLIB}/lib -I${JASPER}/include"
                    - ./clean
                    - ./configure << EOF
                    - 4
                    - EOF
                    - ./compile 2>&1 | tee build.log
                    - cd /home/ec2-user
                    - chown -R ec2-user.ec2-user UPP        


  WrfImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: wrf-4-4-0
      Version: 4.4.0
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeType: gp2
            VolumeSize: 50
      AdditionalInstanceConfiguration:
        SystemsManagerAgent:
          UninstallAfterBuild: true
      Components:
        - ComponentArn: !Ref WrfComponent
      ParentImage: ami-03c70fb2cbb1eb205  # ParallelCluster v3.2.1 - USE2 - Amazon Linux 2 - x86_64

  WrfImageBuilderInfrastructure:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    DependsOn: WrfImageBuilderInstanceProfile
    Properties:
      Name: wrf-4-4-0
      InstanceTypes:
        - c5.xlarge
      KeyPair: hahnd
      InstanceProfileName: WrfCloudImageBuilderInstanceProfile
      TerminateInstanceOnFailure: true

  WrfImageBuilderPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Name: wrf-4-4-0
      ImageRecipeArn: !Ref WrfImageRecipe
      InfrastructureConfigurationArn: !Ref WrfImageBuilderInfrastructure

  WrfImageBuilderInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowImageBuilder
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
              - Action:
                  - ec2:RunInstances
                Effect: Allow
                Resource:
                  - arn:aws:ec2:*::image/*
                  - arn:aws:ec2:*::snapshot/*
                  - arn:aws:ec2:*:*:subnet/*
                  - arn:aws:ec2:*:*:network-interface/*
                  - arn:aws:ec2:*:*:security-group/*
                  - arn:aws:ec2:*:*:key-pair/*
                  - arn:aws:ec2:*:*:launch-template/*
                  - arn:aws:license-manager:*:*:license-configuration:*
              - Action:
                  - ec2:RunInstances
                Condition:
                  StringEquals:
                    aws:RequestTag/CreatedBy:
                      - EC2 Image Builder
                      - EC2 Fast Launch
                Effect: Allow
                Resource:
                  - arn:aws:ec2:*:*:volume/*
                  - arn:aws:ec2:*:*:instance/*
              - Action: iam:PassRole
                Condition:
                  StringEquals:
                    iam:PassedToService:
                      - ec2.amazonaws.com
                      - ec2.amazonaws.com.cn
                      - vmie.amazonaws.com
                Effect: Allow
                Resource: '*'
              - Action:
                  - ec2:StopInstances
                  - ec2:StartInstances
                  - ec2:TerminateInstances
                Condition:
                  StringEquals:
                    ec2:ResourceTag/CreatedBy: EC2 Image Builder
                Effect: Allow
                Resource: '*'
              - Action:
                  - ec2:CopyImage
                  - ec2:CreateImage
                  - ec2:CreateLaunchTemplate
                  - ec2:DeregisterImage
                  - ec2:DescribeImages
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceTypeOfferings
                  - ec2:DescribeInstanceTypes
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:ModifyImageAttribute
                  - ec2:DescribeImportImageTasks
                  - ec2:DescribeExportImageTasks
                  - ec2:DescribeSnapshots
                Effect: Allow
                Resource: '*'
              - Action:
                  - ec2:ModifySnapshotAttribute
                Condition:
                  StringEquals:
                    ec2:ResourceTag/CreatedBy: EC2 Image Builder
                Effect: Allow
                Resource: arn:aws:ec2:*::snapshot/*
              - Action:
                  - ec2:CreateTags
                Condition:
                  StringEquals:
                    aws:RequestTag/CreatedBy:
                      - EC2 Image Builder
                      - EC2 Fast Launch
                    ec2:CreateAction:
                      - RunInstances
                      - CreateImage
                Effect: Allow
                Resource: '*'
              - Action:
                  - ec2:CreateTags
                Effect: Allow
                Resource:
                  - arn:aws:ec2:*::image/*
                  - arn:aws:ec2:*:*:export-image-task/*
              - Action:
                  - ec2:CreateTags
                Condition:
                  StringEquals:
                    aws:RequestTag/CreatedBy:
                      - EC2 Image Builder
                      - EC2 Fast Launch
                Effect: Allow
                Resource:
                  - arn:aws:ec2:*::snapshot/*
                  - arn:aws:ec2:*:*:launch-template/*
              - Action:
                  - license-manager:UpdateLicenseSpecificationsForResource
                Effect: Allow
                Resource: '*'
              - Action:
                  - sns:Publish
                Effect: Allow
                Resource: '*'
              - Action:
                  - ssm:ListCommands
                  - ssm:ListCommandInvocations
                  - ssm:AddTagsToResource
                  - ssm:DescribeInstanceInformation
                  - ssm:GetAutomationExecution
                  - ssm:StopAutomationExecution
                  - ssm:ListInventoryEntries
                  - ssm:SendAutomationSignal
                  - ssm:DescribeInstanceAssociationsStatus
                  - ssm:DescribeAssociationExecutions
                Effect: Allow
                Resource: '*'
              - Action: ssm:SendCommand
                Effect: Allow
                Resource:
                  - arn:aws:ssm:*:*:document/AWS-RunPowerShellScript
                  - arn:aws:ssm:*:*:document/AWS-RunShellScript
                  - arn:aws:ssm:*:*:document/AWSEC2-RunSysprep
                  - arn:aws:s3:::*
              - Action:
                  - ssm:SendCommand
                Condition:
                  StringEquals:
                    ssm:resourceTag/CreatedBy:
                      - EC2 Image Builder
                Effect: Allow
                Resource:
                  - arn:aws:ec2:*:*:instance/*
              - Action: ssm:StartAutomationExecution
                Effect: Allow
                Resource: arn:aws:ssm:*:*:automation-definition/ImageBuilder*
              - Action:
                  - ssm:CreateAssociation
                  - ssm:DeleteAssociation
                Effect: Allow
                Resource:
                  - arn:aws:ssm:*:*:document/AWS-GatherSoftwareInventory
                  - arn:aws:ssm:*:*:association/*
                  - arn:aws:ec2:*:*:instance/*
              - Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncryptFrom
                  - kms:ReEncryptTo
                  - kms:GenerateDataKeyWithoutPlaintext
                Condition:
                  ForAllValues:StringEquals:
                    kms:EncryptionContextKeys:
                      - aws:ebs:id
                  StringLike:
                    kms:ViaService:
                      - ec2.*.amazonaws.com
                Effect: Allow
                Resource: '*'
              - Action:
                  - kms:DescribeKey
                Condition:
                  StringLike:
                    kms:ViaService:
                      - ec2.*.amazonaws.com
                Effect: Allow
                Resource: '*'
              - Action: kms:CreateGrant
                Condition:
                  Bool:
                    kms:GrantIsForAWSResource: true
                  StringLike:
                    kms:ViaService:
                      - ec2.*.amazonaws.com
                Effect: Allow
                Resource: '*'
              - Action: sts:AssumeRole
                Effect: Allow
                Resource: arn:aws:iam::*:role/EC2ImageBuilderDistributionCrossAccountRole
              - Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:log-group:/aws/imagebuilder/*
              - Action:
                  - ec2:CreateLaunchTemplateVersion
                  - ec2:DescribeLaunchTemplates
                  - ec2:ModifyLaunchTemplate
                  - ec2:DescribeLaunchTemplateVersions
                Effect: Allow
                Resource: '*'
              - Action:
                  - ec2:ExportImage
                Condition:
                  StringEquals:
                    ec2:ResourceTag/CreatedBy: EC2 Image Builder
                Effect: Allow
                Resource: arn:aws:ec2:*::image/*
              - Action:
                  - ec2:ExportImage
                Effect: Allow
                Resource: arn:aws:ec2:*:*:export-image-task/*
              - Action:
                  - ec2:CancelExportTask
                Condition:
                  StringEquals:
                    ec2:ResourceTag/CreatedBy: EC2 Image Builder
                Effect: Allow
                Resource: arn:aws:ec2:*:*:export-image-task/*
              - Action: iam:CreateServiceLinkedRole
                Condition:
                  StringEquals:
                    iam:AWSServiceName:
                      - ssm.amazonaws.com
                      - ec2fastlaunch.amazonaws.com
                Effect: Allow
                Resource: '*'
              - Action:
                  - ec2:EnableFastLaunch
                Condition:
                  StringEquals:
                    ec2:ResourceTag/CreatedBy: EC2 Image Builder
                Effect: Allow
                Resource:
                  - arn:aws:ec2:*::image/*
                  - arn:aws:ec2:*:*:launch-template/*

  WrfImageBuilderInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: WrfCloudImageBuilderInstanceProfile
      Roles:
        - !Ref WrfImageBuilderInstanceRole
